// Vitest Snapshot v1

exports[`page loader > base 1`] = `
"
export function resolvePage(resolver) {
  return async name => await resolvePluginPage(name) ?? await resolver(name)
}

export async function resolvePluginPage(name) {
  if (name.includes('::')) {
    const [namespace, page] = name.split('::')
    if (namespace && page) {
      const namespaces = {
        'MyPackage1': [
          () => resolvePageWithVite(page, import.meta.glob('/test_node_modules/my-plugin1/Pages/**/*.vue'), false),
        ],
        'MyPackage2': [
          () => resolvePageWithVite(page, import.meta.glob('/test_node_modules/my-plugin2/other-pages/**/*.vue'), false),
        ],
        'MyPhpPackage': [
          () => resolvePageWithVite(page, import.meta.glob('/test_vendor/ycs77/my-php-package/resources/js/Pages/**/*.vue'), false),
        ],
      }
      if (!namespaces[namespace]) {
        throw new Error(\`[inertia-plugin]: Namespace \\"\${namespace}\\" not found\`)
      }
      for (const importedNamespace of namespaces[namespace]) {
        if (importedNamespace && typeof importedNamespace === 'function') {
          return importedNamespace()
        }
      }
    }
  }
}

export async function resolvePageWithVite(name, pages, throwNotFoundError = true) {
  for (const path in pages) {
    if (path.endsWith(\`\${name.replace('.', '/')}.vue\`)) {
      const module = typeof pages[path] === 'function'
        ? pages[path]()
        : pages[path]

      return await Promise.resolve(module).then(module => module.default || module)
    }
  }

  if (throwNotFoundError) {
    throw new Error(\`[inertia-plugin]: Page \\"\${name}\\" not found\`)
  }
}"
`;
